//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using Microsoft.Web.Services3;

// 
// This source code was auto-generated by wsdl, Version=4.6.81.0.
// 

namespace SelcommWebServices.SelcommOSS.Singtel.SMSC
{
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'Policy' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'Policy' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'Policy' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'Policy' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    // CODEGEN: The optional WSDL extension element 'Policy' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "SessionManagerSoapBinding", Namespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service")]
    public partial class SessionManagerService : WebServicesClientProtocol
    {

        private System.Threading.SendOrPostCallback getSessionOperationCompleted;

        private System.Threading.SendOrPostCallback changeApplicationPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback getSessionRemainingLifeTimeOperationCompleted;

        private System.Threading.SendOrPostCallback refreshSessionOperationCompleted;

        private System.Threading.SendOrPostCallback destroySessionOperationCompleted;

        public SoapContext RequestSoapContext { get; internal set; }

        /// <remarks/>
        public SessionManagerService()
        {
            //this.Url = "http://127.0.0.1:10080/session_manager/SessionManager";
            this.Url = "http://127.0.0.1:10080/session_manager/SessionManager";
        }

        /// <remarks/>
        public event getSessionCompletedEventHandler getSessionCompleted;

        /// <remarks/>
        public event changeApplicationPasswordCompletedEventHandler changeApplicationPasswordCompleted;

        /// <remarks/>
        public event getSessionRemainingLifeTimeCompletedEventHandler getSessionRemainingLifeTimeCompleted;

        /// <remarks/>
        public event refreshSessionCompletedEventHandler refreshSessionCompleted;

        /// <remarks/>
        public event destroySessionCompletedEventHandler destroySessionCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", ResponseNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getSessionReturn")]
        public string getSession()
        {
            object[] results = this.Invoke("getSession", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetSession(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getSession", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndgetSession(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getSessionAsync()
        {
            this.getSessionAsync(null);
        }

        /// <remarks/>
        public void getSessionAsync(object userState)
        {
            if ((this.getSessionOperationCompleted == null))
            {
                this.getSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSessionOperationCompleted);
            }
            this.InvokeAsync("getSession", new object[0], this.getSessionOperationCompleted, userState);
        }

        private void OngetSessionOperationCompleted(object arg)
        {
            if ((this.getSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSessionCompleted(this, new getSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", ResponseNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void changeApplicationPassword(string sessionId, string oldPassword, string newPassword)
        {
            this.Invoke("changeApplicationPassword", new object[] {
                    sessionId,
                    oldPassword,
                    newPassword});
        }

        /// <remarks/>
        public System.IAsyncResult BeginchangeApplicationPassword(string sessionId, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("changeApplicationPassword", new object[] {
                    sessionId,
                    oldPassword,
                    newPassword}, callback, asyncState);
        }

        /// <remarks/>
        public void EndchangeApplicationPassword(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void changeApplicationPasswordAsync(string sessionId, string oldPassword, string newPassword)
        {
            this.changeApplicationPasswordAsync(sessionId, oldPassword, newPassword, null);
        }

        /// <remarks/>
        public void changeApplicationPasswordAsync(string sessionId, string oldPassword, string newPassword, object userState)
        {
            if ((this.changeApplicationPasswordOperationCompleted == null))
            {
                this.changeApplicationPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeApplicationPasswordOperationCompleted);
            }
            this.InvokeAsync("changeApplicationPassword", new object[] {
                    sessionId,
                    oldPassword,
                    newPassword}, this.changeApplicationPasswordOperationCompleted, userState);
        }

        private void OnchangeApplicationPasswordOperationCompleted(object arg)
        {
            if ((this.changeApplicationPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeApplicationPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", ResponseNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("getSessionRemainingLifeTimeReturn")]
        public int getSessionRemainingLifeTime(string sessionId)
        {
            object[] results = this.Invoke("getSessionRemainingLifeTime", new object[] {
                    sessionId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetSessionRemainingLifeTime(string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getSessionRemainingLifeTime", new object[] {
                    sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndgetSessionRemainingLifeTime(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void getSessionRemainingLifeTimeAsync(string sessionId)
        {
            this.getSessionRemainingLifeTimeAsync(sessionId, null);
        }

        /// <remarks/>
        public void getSessionRemainingLifeTimeAsync(string sessionId, object userState)
        {
            if ((this.getSessionRemainingLifeTimeOperationCompleted == null))
            {
                this.getSessionRemainingLifeTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSessionRemainingLifeTimeOperationCompleted);
            }
            this.InvokeAsync("getSessionRemainingLifeTime", new object[] {
                    sessionId}, this.getSessionRemainingLifeTimeOperationCompleted, userState);
        }

        private void OngetSessionRemainingLifeTimeOperationCompleted(object arg)
        {
            if ((this.getSessionRemainingLifeTimeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSessionRemainingLifeTimeCompleted(this, new getSessionRemainingLifeTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", ResponseNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("refreshSessionReturn")]
        public string refreshSession(string sessionId)
        {
            object[] results = this.Invoke("refreshSession", new object[] {
                    sessionId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginrefreshSession(string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("refreshSession", new object[] {
                    sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndrefreshSession(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void refreshSessionAsync(string sessionId)
        {
            this.refreshSessionAsync(sessionId, null);
        }

        /// <remarks/>
        public void refreshSessionAsync(string sessionId, object userState)
        {
            if ((this.refreshSessionOperationCompleted == null))
            {
                this.refreshSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrefreshSessionOperationCompleted);
            }
            this.InvokeAsync("refreshSession", new object[] {
                    sessionId}, this.refreshSessionOperationCompleted, userState);
        }

        private void OnrefreshSessionOperationCompleted(object arg)
        {
            if ((this.refreshSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.refreshSessionCompleted(this, new refreshSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", ResponseNamespace = "http://www.bea.com/wsdl/wlcp/wlng/session_manager/service", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("destroySessionReturn")]
        public bool destroySession(string sessionId)
        {
            object[] results = this.Invoke("destroySession", new object[] {
                    sessionId});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegindestroySession(string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("destroySession", new object[] {
                    sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public bool EnddestroySession(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void destroySessionAsync(string sessionId)
        {
            this.destroySessionAsync(sessionId, null);
        }

        /// <remarks/>
        public void destroySessionAsync(string sessionId, object userState)
        {
            if ((this.destroySessionOperationCompleted == null))
            {
                this.destroySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OndestroySessionOperationCompleted);
            }
            this.InvokeAsync("destroySession", new object[] {
                    sessionId}, this.destroySessionOperationCompleted, userState);
        }

        private void OndestroySessionOperationCompleted(object arg)
        {
            if ((this.destroySessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.destroySessionCompleted(this, new destroySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void getSessionCompletedEventHandler(object sender, getSessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void changeApplicationPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void getSessionRemainingLifeTimeCompletedEventHandler(object sender, getSessionRemainingLifeTimeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSessionRemainingLifeTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getSessionRemainingLifeTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void refreshSessionCompletedEventHandler(object sender, refreshSessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class refreshSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal refreshSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    public delegate void destroySessionCompletedEventHandler(object sender, destroySessionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class destroySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal destroySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}